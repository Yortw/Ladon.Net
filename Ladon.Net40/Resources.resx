<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="EnumerableCannotBeEmpty" xml:space="preserve">
    <value>{0} must contain at least one item.</value>
    <comment>ArgumentException error message when an enumerable contains zero items and at least one is required. {0} = argument name.</comment>
  </data>
  <data name="NullPlaceholder" xml:space="preserve">
    <value>&lt;NULL&gt;</value>
    <comment>A string value that represents a null .Net reference, used for embedding in an error message when a value is nul.</comment>
  </data>
  <data name="NumberCannotBeLessThanOrEqualToZero" xml:space="preserve">
    <value>{0} must be greater than zero.</value>
    <comment>ArgumentOutOfRange error message when a number is zero or negative and must be positive, {0} = argument name.</comment>
  </data>
  <data name="NumberCannotBeNegative" xml:space="preserve">
    <value>{0} cannot be negative.</value>
    <comment>ArgumentOutOfRange error message when a number is negative and must be zero or greater, {0} = argument name.</comment>
  </data>
  <data name="NumberCannotBeZero" xml:space="preserve">
    <value>{0} cannot be zero.</value>
    <comment>ArgumentOutOfRange error message when a number is zero and must be non-zero, {0} = argument name.</comment>
  </data>
  <data name="NumberTooLarge" xml:space="preserve">
    <value>{0} cannot be more than {1}.</value>
    <comment>ArgumentOutOfRange error message when a number is above a maximum value, {0} = argument name, {1} = maximum value.</comment>
  </data>
  <data name="NumberTooSmall" xml:space="preserve">
    <value>{0} cannot be less than {1}.</value>
    <comment>ArgumentOutOfRange error message when a number is below a minimum value, {0} = argument name, {1} = minimum value.</comment>
  </data>
  <data name="StringArgumentCannotBeEmpty" xml:space="preserve">
    <value>{0} cannot be an empty string.</value>
    <comment>ArgumentException error message when a string is empty, {0} = argument name</comment>
  </data>
  <data name="StringCannotBeWhitespace" xml:space="preserve">
    <value>{0} cannot contain only white space.</value>
    <comment>ArgumentException error message when a string is contains only whitespace characters, {0} = argument name</comment>
  </data>
  <data name="StringLengthOutOfRange" xml:space="preserve">
    <value>{0} must have a length between {1} and {2}.</value>
    <comment>ArgumentException error message when a string has a value outside a specified range, {0} = argument name, {1} = minimum length, {2} = maximum length.</comment>
  </data>
  <data name="StringTooLong" xml:space="preserve">
    <value>{0} cannot be longer than {1}.</value>
    <comment>ArgumentException error message when a string is too long, {0) = argument name, {1} = maximum length.</comment>
  </data>
  <data name="ValueNotAllowed" xml:space="preserve">
    <value>{0} cannot be "{1}".</value>
    <comment>ArgumentException error message when a value matches an forbidden value, {0} = argument name, {1} = string representation of the not allowed value.</comment>
  </data>
</root>